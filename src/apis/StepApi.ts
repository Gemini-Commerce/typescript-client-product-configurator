/* tslint:disable */
/* eslint-disable */
/**
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GooglerpcStatus,
  ProductConfiguratorBulkCreateStepsRequest,
  ProductConfiguratorBulkDeleteStepsRequest,
  ProductConfiguratorCopyStepRequest,
  ProductConfiguratorCreateStepRequest,
  ProductConfiguratorUpdateStepRequest,
  ProductconfiguratorstepBulkCreateResponse,
  ProductconfiguratorstepEntity,
} from '../models/index';
import {
    GooglerpcStatusFromJSON,
    GooglerpcStatusToJSON,
    ProductConfiguratorBulkCreateStepsRequestFromJSON,
    ProductConfiguratorBulkCreateStepsRequestToJSON,
    ProductConfiguratorBulkDeleteStepsRequestFromJSON,
    ProductConfiguratorBulkDeleteStepsRequestToJSON,
    ProductConfiguratorCopyStepRequestFromJSON,
    ProductConfiguratorCopyStepRequestToJSON,
    ProductConfiguratorCreateStepRequestFromJSON,
    ProductConfiguratorCreateStepRequestToJSON,
    ProductConfiguratorUpdateStepRequestFromJSON,
    ProductConfiguratorUpdateStepRequestToJSON,
    ProductconfiguratorstepBulkCreateResponseFromJSON,
    ProductconfiguratorstepBulkCreateResponseToJSON,
    ProductconfiguratorstepEntityFromJSON,
    ProductconfiguratorstepEntityToJSON,
} from '../models/index';

export interface ProductConfiguratorBulkCreateStepsOperationRequest {
    tenantId: string;
    configuratorId: string;
    body: ProductConfiguratorBulkCreateStepsRequest;
}

export interface ProductConfiguratorBulkDeleteStepsOperationRequest {
    tenantId: string;
    body: ProductConfiguratorBulkDeleteStepsRequest;
}

export interface ProductConfiguratorCopyStepOperationRequest {
    tenantId: string;
    sourceStepId: string;
    body: ProductConfiguratorCopyStepRequest;
}

export interface ProductConfiguratorCreateStepOperationRequest {
    tenantId: string;
    configuratorId: string;
    body: ProductConfiguratorCreateStepRequest;
}

export interface ProductConfiguratorDeleteStepRequest {
    tenantId: string;
    stepId: string;
}

export interface ProductConfiguratorUpdateStepOperationRequest {
    tenantId: string;
    stepId: string;
    body: ProductConfiguratorUpdateStepRequest;
}

/**
 * 
 */
export class StepApi extends runtime.BaseAPI {

    /**
     * Add multiple steps to an existing product configurator simultaneously. Submit a POST request with the necessary step details in the body to efficiently extend the configuration process in bulk. Simplify large-scale configuration management effortlessly.
     * Bulk Create Steps
     */
    async productConfiguratorBulkCreateStepsRaw(requestParameters: ProductConfiguratorBulkCreateStepsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorstepBulkCreateResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorBulkCreateSteps.');
        }

        if (requestParameters.configuratorId === null || requestParameters.configuratorId === undefined) {
            throw new runtime.RequiredError('configuratorId','Required parameter requestParameters.configuratorId was null or undefined when calling productConfiguratorBulkCreateSteps.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorBulkCreateSteps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/configurator/{configuratorId}/step/create/bulk`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"configuratorId"}}`, encodeURIComponent(String(requestParameters.configuratorId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorBulkCreateStepsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorstepBulkCreateResponseFromJSON(jsonValue));
    }

    /**
     * Add multiple steps to an existing product configurator simultaneously. Submit a POST request with the necessary step details in the body to efficiently extend the configuration process in bulk. Simplify large-scale configuration management effortlessly.
     * Bulk Create Steps
     */
    async productConfiguratorBulkCreateSteps(requestParameters: ProductConfiguratorBulkCreateStepsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorstepBulkCreateResponse> {
        const response = await this.productConfiguratorBulkCreateStepsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Efficiently remove multiple steps from a product configurator using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of step IDs in the body for streamlined configuration management.
     * Bulk Delete Steps
     */
    async productConfiguratorBulkDeleteStepsRaw(requestParameters: ProductConfiguratorBulkDeleteStepsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorBulkDeleteSteps.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorBulkDeleteSteps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/step/delete/bulk`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorBulkDeleteStepsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Efficiently remove multiple steps from a product configurator using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of step IDs in the body for streamlined configuration management.
     * Bulk Delete Steps
     */
    async productConfiguratorBulkDeleteSteps(requestParameters: ProductConfiguratorBulkDeleteStepsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productConfiguratorBulkDeleteStepsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Duplicate an existing step from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new step based on the source configuration. Streamline step replication effortlessly.
     * Copy Step
     */
    async productConfiguratorCopyStepRaw(requestParameters: ProductConfiguratorCopyStepOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorstepEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorCopyStep.');
        }

        if (requestParameters.sourceStepId === null || requestParameters.sourceStepId === undefined) {
            throw new runtime.RequiredError('sourceStepId','Required parameter requestParameters.sourceStepId was null or undefined when calling productConfiguratorCopyStep.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorCopyStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/step/{sourceStepId}/copy`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"sourceStepId"}}`, encodeURIComponent(String(requestParameters.sourceStepId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorCopyStepRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorstepEntityFromJSON(jsonValue));
    }

    /**
     * Duplicate an existing step from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new step based on the source configuration. Streamline step replication effortlessly.
     * Copy Step
     */
    async productConfiguratorCopyStep(requestParameters: ProductConfiguratorCopyStepOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorstepEntity> {
        const response = await this.productConfiguratorCopyStepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new step to an existing product configurator by specifying the tenant and configurator IDs. Utilize a POST request with the required step details in the body to seamlessly extend the configuration process.
     * Create Step
     */
    async productConfiguratorCreateStepRaw(requestParameters: ProductConfiguratorCreateStepOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorstepEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorCreateStep.');
        }

        if (requestParameters.configuratorId === null || requestParameters.configuratorId === undefined) {
            throw new runtime.RequiredError('configuratorId','Required parameter requestParameters.configuratorId was null or undefined when calling productConfiguratorCreateStep.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorCreateStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/configurator/{configuratorId}/step/create`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"configuratorId"}}`, encodeURIComponent(String(requestParameters.configuratorId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorCreateStepRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorstepEntityFromJSON(jsonValue));
    }

    /**
     * Add a new step to an existing product configurator by specifying the tenant and configurator IDs. Utilize a POST request with the required step details in the body to seamlessly extend the configuration process.
     * Create Step
     */
    async productConfiguratorCreateStep(requestParameters: ProductConfiguratorCreateStepOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorstepEntity> {
        const response = await this.productConfiguratorCreateStepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a step from a product configurator by specifying the tenant and step IDs. Ensure precision in configuration management with a straightforward DELETE request, simplifying the elimination of unwanted steps.
     * Delete Step
     */
    async productConfiguratorDeleteStepRaw(requestParameters: ProductConfiguratorDeleteStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GooglerpcStatus>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorDeleteStep.');
        }

        if (requestParameters.stepId === null || requestParameters.stepId === undefined) {
            throw new runtime.RequiredError('stepId','Required parameter requestParameters.stepId was null or undefined when calling productConfiguratorDeleteStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/step/{stepId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"stepId"}}`, encodeURIComponent(String(requestParameters.stepId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GooglerpcStatusFromJSON(jsonValue));
    }

    /**
     * Remove a step from a product configurator by specifying the tenant and step IDs. Ensure precision in configuration management with a straightforward DELETE request, simplifying the elimination of unwanted steps.
     * Delete Step
     */
    async productConfiguratorDeleteStep(requestParameters: ProductConfiguratorDeleteStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GooglerpcStatus> {
        const response = await this.productConfiguratorDeleteStepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify an existing step within a product configurator by specifying the tenant and step IDs. Utilize a PUT request with updated step details in the body for seamless customization and fine-tuning of your product configurations.
     * Update Step
     */
    async productConfiguratorUpdateStepRaw(requestParameters: ProductConfiguratorUpdateStepOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorstepEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorUpdateStep.');
        }

        if (requestParameters.stepId === null || requestParameters.stepId === undefined) {
            throw new runtime.RequiredError('stepId','Required parameter requestParameters.stepId was null or undefined when calling productConfiguratorUpdateStep.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorUpdateStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/step/{stepId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"stepId"}}`, encodeURIComponent(String(requestParameters.stepId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorUpdateStepRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorstepEntityFromJSON(jsonValue));
    }

    /**
     * Modify an existing step within a product configurator by specifying the tenant and step IDs. Utilize a PUT request with updated step details in the body for seamless customization and fine-tuning of your product configurations.
     * Update Step
     */
    async productConfiguratorUpdateStep(requestParameters: ProductConfiguratorUpdateStepOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorstepEntity> {
        const response = await this.productConfiguratorUpdateStepRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
