/* tslint:disable */
/* eslint-disable */
/**
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GooglerpcStatus,
  ProductConfiguratorBulkCreatePropertiesRequest,
  ProductConfiguratorBulkUpdatePropertiesRequest,
  ProductConfiguratorCreatePropertyRequest,
  ProductConfiguratorListPropertiesRequest,
  ProductConfiguratorUpdatePropertyRequest,
  ProductconfiguratorpropertyBulkCreateResponse,
  ProductconfiguratorpropertyBulkUpdateResponse,
  ProductconfiguratorpropertyEntity,
  PropertyListPropertiesResponse,
} from '../models/index';
import {
    GooglerpcStatusFromJSON,
    GooglerpcStatusToJSON,
    ProductConfiguratorBulkCreatePropertiesRequestFromJSON,
    ProductConfiguratorBulkCreatePropertiesRequestToJSON,
    ProductConfiguratorBulkUpdatePropertiesRequestFromJSON,
    ProductConfiguratorBulkUpdatePropertiesRequestToJSON,
    ProductConfiguratorCreatePropertyRequestFromJSON,
    ProductConfiguratorCreatePropertyRequestToJSON,
    ProductConfiguratorListPropertiesRequestFromJSON,
    ProductConfiguratorListPropertiesRequestToJSON,
    ProductConfiguratorUpdatePropertyRequestFromJSON,
    ProductConfiguratorUpdatePropertyRequestToJSON,
    ProductconfiguratorpropertyBulkCreateResponseFromJSON,
    ProductconfiguratorpropertyBulkCreateResponseToJSON,
    ProductconfiguratorpropertyBulkUpdateResponseFromJSON,
    ProductconfiguratorpropertyBulkUpdateResponseToJSON,
    ProductconfiguratorpropertyEntityFromJSON,
    ProductconfiguratorpropertyEntityToJSON,
    PropertyListPropertiesResponseFromJSON,
    PropertyListPropertiesResponseToJSON,
} from '../models/index';

export interface ProductConfiguratorBulkCreatePropertiesOperationRequest {
    tenantId: string;
    body: ProductConfiguratorBulkCreatePropertiesRequest;
}

export interface ProductConfiguratorBulkUpdatePropertiesOperationRequest {
    tenantId: string;
    body: ProductConfiguratorBulkUpdatePropertiesRequest;
}

export interface ProductConfiguratorCreatePropertyOperationRequest {
    tenantId: string;
    body: ProductConfiguratorCreatePropertyRequest;
}

export interface ProductConfiguratorListPropertiesOperationRequest {
    tenantId: string;
    matrixId: string;
    pageSize: string;
    body: ProductConfiguratorListPropertiesRequest;
}

export interface ProductConfiguratorUpdatePropertyOperationRequest {
    tenantId: string;
    propertyId: string;
    body: ProductConfiguratorUpdatePropertyRequest;
}

/**
 * 
 */
export class PropertyApi extends runtime.BaseAPI {

    /**
     * Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
     * Bulk Create Properties
     */
    async productConfiguratorBulkCreatePropertiesRaw(requestParameters: ProductConfiguratorBulkCreatePropertiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorpropertyBulkCreateResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorBulkCreateProperties.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorBulkCreateProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/property/create/bulk`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorBulkCreatePropertiesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorpropertyBulkCreateResponseFromJSON(jsonValue));
    }

    /**
     * Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
     * Bulk Create Properties
     */
    async productConfiguratorBulkCreateProperties(requestParameters: ProductConfiguratorBulkCreatePropertiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorpropertyBulkCreateResponse> {
        const response = await this.productConfiguratorBulkCreatePropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
     * Bulk Update Properties
     */
    async productConfiguratorBulkUpdatePropertiesRaw(requestParameters: ProductConfiguratorBulkUpdatePropertiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorpropertyBulkUpdateResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorBulkUpdateProperties.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorBulkUpdateProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/properties/bulk`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorBulkUpdatePropertiesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorpropertyBulkUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
     * Bulk Update Properties
     */
    async productConfiguratorBulkUpdateProperties(requestParameters: ProductConfiguratorBulkUpdatePropertiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorpropertyBulkUpdateResponse> {
        const response = await this.productConfiguratorBulkUpdatePropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
     * Create Property
     */
    async productConfiguratorCreatePropertyRaw(requestParameters: ProductConfiguratorCreatePropertyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorpropertyEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorCreateProperty.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorCreateProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/property/create`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorCreatePropertyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorpropertyEntityFromJSON(jsonValue));
    }

    /**
     * Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
     * Create Property
     */
    async productConfiguratorCreateProperty(requestParameters: ProductConfiguratorCreatePropertyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorpropertyEntity> {
        const response = await this.productConfiguratorCreatePropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
     * List Properties
     */
    async productConfiguratorListPropertiesRaw(requestParameters: ProductConfiguratorListPropertiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyListPropertiesResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorListProperties.');
        }

        if (requestParameters.matrixId === null || requestParameters.matrixId === undefined) {
            throw new runtime.RequiredError('matrixId','Required parameter requestParameters.matrixId was null or undefined when calling productConfiguratorListProperties.');
        }

        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling productConfiguratorListProperties.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorListProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/matrix/{matrixId}/page-size/{pageSize}/properties`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"matrixId"}}`, encodeURIComponent(String(requestParameters.matrixId))).replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters.pageSize))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorListPropertiesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyListPropertiesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
     * List Properties
     */
    async productConfiguratorListProperties(requestParameters: ProductConfiguratorListPropertiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyListPropertiesResponse> {
        const response = await this.productConfiguratorListPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
     * Update Property
     */
    async productConfiguratorUpdatePropertyRaw(requestParameters: ProductConfiguratorUpdatePropertyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorpropertyEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorUpdateProperty.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling productConfiguratorUpdateProperty.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorUpdateProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/property/{propertyId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"propertyId"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorUpdatePropertyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorpropertyEntityFromJSON(jsonValue));
    }

    /**
     * Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
     * Update Property
     */
    async productConfiguratorUpdateProperty(requestParameters: ProductConfiguratorUpdatePropertyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorpropertyEntity> {
        const response = await this.productConfiguratorUpdatePropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
