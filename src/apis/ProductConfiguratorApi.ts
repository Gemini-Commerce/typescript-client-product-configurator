/* tslint:disable */
/* eslint-disable */
/**
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GooglerpcStatus,
  ProductConfiguratorListPropertiesByConfigurationRequest,
  ProductconfiguratorpropertyEntity,
  PropertyListPropertiesByConfigurationResponse,
} from '../models/index';
import {
    GooglerpcStatusFromJSON,
    GooglerpcStatusToJSON,
    ProductConfiguratorListPropertiesByConfigurationRequestFromJSON,
    ProductConfiguratorListPropertiesByConfigurationRequestToJSON,
    ProductconfiguratorpropertyEntityFromJSON,
    ProductconfiguratorpropertyEntityToJSON,
    PropertyListPropertiesByConfigurationResponseFromJSON,
    PropertyListPropertiesByConfigurationResponseToJSON,
} from '../models/index';

export interface ProductConfiguratorGetPropertyRequest {
    tenantId: string;
    propertyId: string;
}

export interface ProductConfiguratorListPropertiesByConfigurationOperationRequest {
    tenantId: string;
    configuratorId: string;
    pageSize: string;
    body: ProductConfiguratorListPropertiesByConfigurationRequest;
}

/**
 * 
 */
export class ProductConfiguratorApi extends runtime.BaseAPI {

    /**
     */
    async productConfiguratorGetPropertyRaw(requestParameters: ProductConfiguratorGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorpropertyEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorGetProperty.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling productConfiguratorGetProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/{tenantId}/property/{propertyId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"propertyId"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorpropertyEntityFromJSON(jsonValue));
    }

    /**
     */
    async productConfiguratorGetProperty(requestParameters: ProductConfiguratorGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorpropertyEntity> {
        const response = await this.productConfiguratorGetPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productConfiguratorListPropertiesByConfigurationRaw(requestParameters: ProductConfiguratorListPropertiesByConfigurationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyListPropertiesByConfigurationResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorListPropertiesByConfiguration.');
        }

        if (requestParameters.configuratorId === null || requestParameters.configuratorId === undefined) {
            throw new runtime.RequiredError('configuratorId','Required parameter requestParameters.configuratorId was null or undefined when calling productConfiguratorListPropertiesByConfiguration.');
        }

        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling productConfiguratorListPropertiesByConfiguration.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorListPropertiesByConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/{tenantId}/configurator/{configuratorId}/page-size/{pageSize}/properties`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"configuratorId"}}`, encodeURIComponent(String(requestParameters.configuratorId))).replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters.pageSize))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorListPropertiesByConfigurationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyListPropertiesByConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async productConfiguratorListPropertiesByConfiguration(requestParameters: ProductConfiguratorListPropertiesByConfigurationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyListPropertiesByConfigurationResponse> {
        const response = await this.productConfiguratorListPropertiesByConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
