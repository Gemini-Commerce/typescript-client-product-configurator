/* tslint:disable */
/* eslint-disable */
/**
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GooglerpcStatus,
  OptionListOptionsResponse,
  ProductConfiguratorBulkCreateOptionsRequest,
  ProductConfiguratorBulkDeleteOptionsRequest,
  ProductConfiguratorBulkUpdateOptionsRequest,
  ProductConfiguratorCopyOptionRequest,
  ProductConfiguratorCreateOptionRequest,
  ProductConfiguratorListPropertiesRequest,
  ProductConfiguratorUpdateOptionRequest,
  ProductconfiguratoroptionBulkCreateResponse,
  ProductconfiguratoroptionBulkUpdateResponse,
  ProductconfiguratoroptionEntity,
} from '../models/index';
import {
    GooglerpcStatusFromJSON,
    GooglerpcStatusToJSON,
    OptionListOptionsResponseFromJSON,
    OptionListOptionsResponseToJSON,
    ProductConfiguratorBulkCreateOptionsRequestFromJSON,
    ProductConfiguratorBulkCreateOptionsRequestToJSON,
    ProductConfiguratorBulkDeleteOptionsRequestFromJSON,
    ProductConfiguratorBulkDeleteOptionsRequestToJSON,
    ProductConfiguratorBulkUpdateOptionsRequestFromJSON,
    ProductConfiguratorBulkUpdateOptionsRequestToJSON,
    ProductConfiguratorCopyOptionRequestFromJSON,
    ProductConfiguratorCopyOptionRequestToJSON,
    ProductConfiguratorCreateOptionRequestFromJSON,
    ProductConfiguratorCreateOptionRequestToJSON,
    ProductConfiguratorListPropertiesRequestFromJSON,
    ProductConfiguratorListPropertiesRequestToJSON,
    ProductConfiguratorUpdateOptionRequestFromJSON,
    ProductConfiguratorUpdateOptionRequestToJSON,
    ProductconfiguratoroptionBulkCreateResponseFromJSON,
    ProductconfiguratoroptionBulkCreateResponseToJSON,
    ProductconfiguratoroptionBulkUpdateResponseFromJSON,
    ProductconfiguratoroptionBulkUpdateResponseToJSON,
    ProductconfiguratoroptionEntityFromJSON,
    ProductconfiguratoroptionEntityToJSON,
} from '../models/index';

export interface ProductConfiguratorBulkCreateOptionsOperationRequest {
    tenantId: string;
    stepId: string;
    body: ProductConfiguratorBulkCreateOptionsRequest;
}

export interface ProductConfiguratorBulkDeleteOptionsOperationRequest {
    tenantId: string;
    body: ProductConfiguratorBulkDeleteOptionsRequest;
}

export interface ProductConfiguratorBulkUpdateOptionsOperationRequest {
    tenantId: string;
    body: ProductConfiguratorBulkUpdateOptionsRequest;
}

export interface ProductConfiguratorCopyOptionOperationRequest {
    tenantId: string;
    sourceOptionId: string;
    body: ProductConfiguratorCopyOptionRequest;
}

export interface ProductConfiguratorCreateOptionOperationRequest {
    tenantId: string;
    stepId: string;
    body: ProductConfiguratorCreateOptionRequest;
}

export interface ProductConfiguratorDeleteOptionRequest {
    tenantId: string;
    optionId: string;
}

export interface ProductConfiguratorListOptionsRequest {
    tenantId: string;
    stepId: string;
    pageSize: number;
    body: ProductConfiguratorListPropertiesRequest;
}

export interface ProductConfiguratorUpdateOptionOperationRequest {
    tenantId: string;
    optionId: string;
    body: ProductConfiguratorUpdateOptionRequest;
}

/**
 * 
 */
export class OptionApi extends runtime.BaseAPI {

    /**
     * Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
     * Bulk Create Options
     */
    async productConfiguratorBulkCreateOptionsRaw(requestParameters: ProductConfiguratorBulkCreateOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratoroptionBulkCreateResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorBulkCreateOptions.');
        }

        if (requestParameters.stepId === null || requestParameters.stepId === undefined) {
            throw new runtime.RequiredError('stepId','Required parameter requestParameters.stepId was null or undefined when calling productConfiguratorBulkCreateOptions.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorBulkCreateOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/step/{stepId}/option/create/bulk`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"stepId"}}`, encodeURIComponent(String(requestParameters.stepId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorBulkCreateOptionsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratoroptionBulkCreateResponseFromJSON(jsonValue));
    }

    /**
     * Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
     * Bulk Create Options
     */
    async productConfiguratorBulkCreateOptions(requestParameters: ProductConfiguratorBulkCreateOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratoroptionBulkCreateResponse> {
        const response = await this.productConfiguratorBulkCreateOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
     * Bulk Delete Options
     */
    async productConfiguratorBulkDeleteOptionsRaw(requestParameters: ProductConfiguratorBulkDeleteOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorBulkDeleteOptions.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorBulkDeleteOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/option/delete/bulk`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorBulkDeleteOptionsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
     * Bulk Delete Options
     */
    async productConfiguratorBulkDeleteOptions(requestParameters: ProductConfiguratorBulkDeleteOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productConfiguratorBulkDeleteOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
     * Bulk Update Options
     */
    async productConfiguratorBulkUpdateOptionsRaw(requestParameters: ProductConfiguratorBulkUpdateOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratoroptionBulkUpdateResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorBulkUpdateOptions.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorBulkUpdateOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/option/bulk`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorBulkUpdateOptionsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratoroptionBulkUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
     * Bulk Update Options
     */
    async productConfiguratorBulkUpdateOptions(requestParameters: ProductConfiguratorBulkUpdateOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratoroptionBulkUpdateResponse> {
        const response = await this.productConfiguratorBulkUpdateOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
     * Copy Option
     */
    async productConfiguratorCopyOptionRaw(requestParameters: ProductConfiguratorCopyOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratoroptionEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorCopyOption.');
        }

        if (requestParameters.sourceOptionId === null || requestParameters.sourceOptionId === undefined) {
            throw new runtime.RequiredError('sourceOptionId','Required parameter requestParameters.sourceOptionId was null or undefined when calling productConfiguratorCopyOption.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorCopyOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/option/{sourceOptionId}/copy`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"sourceOptionId"}}`, encodeURIComponent(String(requestParameters.sourceOptionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorCopyOptionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratoroptionEntityFromJSON(jsonValue));
    }

    /**
     * Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
     * Copy Option
     */
    async productConfiguratorCopyOption(requestParameters: ProductConfiguratorCopyOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratoroptionEntity> {
        const response = await this.productConfiguratorCopyOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
     * Create Option
     */
    async productConfiguratorCreateOptionRaw(requestParameters: ProductConfiguratorCreateOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratoroptionEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorCreateOption.');
        }

        if (requestParameters.stepId === null || requestParameters.stepId === undefined) {
            throw new runtime.RequiredError('stepId','Required parameter requestParameters.stepId was null or undefined when calling productConfiguratorCreateOption.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorCreateOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/step/{stepId}/option/create`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"stepId"}}`, encodeURIComponent(String(requestParameters.stepId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorCreateOptionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratoroptionEntityFromJSON(jsonValue));
    }

    /**
     * Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
     * Create Option
     */
    async productConfiguratorCreateOption(requestParameters: ProductConfiguratorCreateOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratoroptionEntity> {
        const response = await this.productConfiguratorCreateOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
     * Delete Option
     */
    async productConfiguratorDeleteOptionRaw(requestParameters: ProductConfiguratorDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorDeleteOption.');
        }

        if (requestParameters.optionId === null || requestParameters.optionId === undefined) {
            throw new runtime.RequiredError('optionId','Required parameter requestParameters.optionId was null or undefined when calling productConfiguratorDeleteOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/option/{optionId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters.optionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
     * Delete Option
     */
    async productConfiguratorDeleteOption(requestParameters: ProductConfiguratorDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productConfiguratorDeleteOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
     * List Options
     */
    async productConfiguratorListOptionsRaw(requestParameters: ProductConfiguratorListOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OptionListOptionsResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorListOptions.');
        }

        if (requestParameters.stepId === null || requestParameters.stepId === undefined) {
            throw new runtime.RequiredError('stepId','Required parameter requestParameters.stepId was null or undefined when calling productConfiguratorListOptions.');
        }

        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling productConfiguratorListOptions.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorListOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/step/{stepId}/page-size/{pageSize}/options`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"stepId"}}`, encodeURIComponent(String(requestParameters.stepId))).replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters.pageSize))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorListPropertiesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionListOptionsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
     * List Options
     */
    async productConfiguratorListOptions(requestParameters: ProductConfiguratorListOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OptionListOptionsResponse> {
        const response = await this.productConfiguratorListOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
     * Update Option
     */
    async productConfiguratorUpdateOptionRaw(requestParameters: ProductConfiguratorUpdateOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratoroptionEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorUpdateOption.');
        }

        if (requestParameters.optionId === null || requestParameters.optionId === undefined) {
            throw new runtime.RequiredError('optionId','Required parameter requestParameters.optionId was null or undefined when calling productConfiguratorUpdateOption.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorUpdateOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/option/{optionId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters.optionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorUpdateOptionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratoroptionEntityFromJSON(jsonValue));
    }

    /**
     * Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
     * Update Option
     */
    async productConfiguratorUpdateOption(requestParameters: ProductConfiguratorUpdateOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratoroptionEntity> {
        const response = await this.productConfiguratorUpdateOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
