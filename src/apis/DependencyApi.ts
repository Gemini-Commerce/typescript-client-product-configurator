/* tslint:disable */
/* eslint-disable */
/**
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DependencyListDependenciesResponse,
  GooglerpcStatus,
  ProductConfiguratorCreateDependencyRequest,
  ProductConfiguratorListDependenciesRequest,
  ProductConfiguratorUpdateDependencyRequest,
  ProductconfiguratordependencyEntity,
} from '../models/index';
import {
    DependencyListDependenciesResponseFromJSON,
    DependencyListDependenciesResponseToJSON,
    GooglerpcStatusFromJSON,
    GooglerpcStatusToJSON,
    ProductConfiguratorCreateDependencyRequestFromJSON,
    ProductConfiguratorCreateDependencyRequestToJSON,
    ProductConfiguratorListDependenciesRequestFromJSON,
    ProductConfiguratorListDependenciesRequestToJSON,
    ProductConfiguratorUpdateDependencyRequestFromJSON,
    ProductConfiguratorUpdateDependencyRequestToJSON,
    ProductconfiguratordependencyEntityFromJSON,
    ProductconfiguratordependencyEntityToJSON,
} from '../models/index';

export interface ProductConfiguratorCreateDependencyOperationRequest {
    tenantId: string;
    stepId: string;
    body: ProductConfiguratorCreateDependencyRequest;
}

export interface ProductConfiguratorDeleteDependencyRequest {
    tenantId: string;
    dependencyId: string;
}

export interface ProductConfiguratorListDependenciesOperationRequest {
    tenantId: string;
    pageSize: number;
    body: ProductConfiguratorListDependenciesRequest;
}

export interface ProductConfiguratorUpdateDependencyOperationRequest {
    tenantId: string;
    dependencyId: string;
    body: ProductConfiguratorUpdateDependencyRequest;
}

/**
 * 
 */
export class DependencyApi extends runtime.BaseAPI {

    /**
     * Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.
     * Create Dependency
     */
    async productConfiguratorCreateDependencyRaw(requestParameters: ProductConfiguratorCreateDependencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratordependencyEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorCreateDependency.');
        }

        if (requestParameters.stepId === null || requestParameters.stepId === undefined) {
            throw new runtime.RequiredError('stepId','Required parameter requestParameters.stepId was null or undefined when calling productConfiguratorCreateDependency.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorCreateDependency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/step/{stepId}/dependency/create`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"stepId"}}`, encodeURIComponent(String(requestParameters.stepId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorCreateDependencyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratordependencyEntityFromJSON(jsonValue));
    }

    /**
     * Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.
     * Create Dependency
     */
    async productConfiguratorCreateDependency(requestParameters: ProductConfiguratorCreateDependencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratordependencyEntity> {
        const response = await this.productConfiguratorCreateDependencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.
     * Delete Dependency
     */
    async productConfiguratorDeleteDependencyRaw(requestParameters: ProductConfiguratorDeleteDependencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorDeleteDependency.');
        }

        if (requestParameters.dependencyId === null || requestParameters.dependencyId === undefined) {
            throw new runtime.RequiredError('dependencyId','Required parameter requestParameters.dependencyId was null or undefined when calling productConfiguratorDeleteDependency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/dependency/{dependencyId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"dependencyId"}}`, encodeURIComponent(String(requestParameters.dependencyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.
     * Delete Dependency
     */
    async productConfiguratorDeleteDependency(requestParameters: ProductConfiguratorDeleteDependencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productConfiguratorDeleteDependencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.
     * List Dependencies
     */
    async productConfiguratorListDependenciesRaw(requestParameters: ProductConfiguratorListDependenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DependencyListDependenciesResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorListDependencies.');
        }

        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling productConfiguratorListDependencies.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorListDependencies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/page-size/{pageSize}/dependencies`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters.pageSize))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorListDependenciesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DependencyListDependenciesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.
     * List Dependencies
     */
    async productConfiguratorListDependencies(requestParameters: ProductConfiguratorListDependenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DependencyListDependenciesResponse> {
        const response = await this.productConfiguratorListDependenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.
     * Update Dependency
     */
    async productConfiguratorUpdateDependencyRaw(requestParameters: ProductConfiguratorUpdateDependencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratordependencyEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorUpdateDependency.');
        }

        if (requestParameters.dependencyId === null || requestParameters.dependencyId === undefined) {
            throw new runtime.RequiredError('dependencyId','Required parameter requestParameters.dependencyId was null or undefined when calling productConfiguratorUpdateDependency.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorUpdateDependency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/dependency/{dependencyId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"dependencyId"}}`, encodeURIComponent(String(requestParameters.dependencyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorUpdateDependencyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratordependencyEntityFromJSON(jsonValue));
    }

    /**
     * Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.
     * Update Dependency
     */
    async productConfiguratorUpdateDependency(requestParameters: ProductConfiguratorUpdateDependencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratordependencyEntity> {
        const response = await this.productConfiguratorUpdateDependencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
