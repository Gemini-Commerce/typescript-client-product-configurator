/* tslint:disable */
/* eslint-disable */
/**
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfiguratorListResponse,
  GooglerpcStatus,
  ProductConfiguratorCopyConfiguratorRequest,
  ProductConfiguratorCreateConfiguratorRequest,
  ProductConfiguratorListPropertiesRequest,
  ProductConfiguratorUpdateConfiguratorRequest,
  ProductconfiguratorconfiguratorEntity,
} from '../models/index';
import {
    ConfiguratorListResponseFromJSON,
    ConfiguratorListResponseToJSON,
    GooglerpcStatusFromJSON,
    GooglerpcStatusToJSON,
    ProductConfiguratorCopyConfiguratorRequestFromJSON,
    ProductConfiguratorCopyConfiguratorRequestToJSON,
    ProductConfiguratorCreateConfiguratorRequestFromJSON,
    ProductConfiguratorCreateConfiguratorRequestToJSON,
    ProductConfiguratorListPropertiesRequestFromJSON,
    ProductConfiguratorListPropertiesRequestToJSON,
    ProductConfiguratorUpdateConfiguratorRequestFromJSON,
    ProductConfiguratorUpdateConfiguratorRequestToJSON,
    ProductconfiguratorconfiguratorEntityFromJSON,
    ProductconfiguratorconfiguratorEntityToJSON,
} from '../models/index';

export interface ProductConfiguratorCopyConfiguratorOperationRequest {
    tenantId: string;
    sourceConfiguratorId: string;
    body: ProductConfiguratorCopyConfiguratorRequest;
}

export interface ProductConfiguratorCreateConfiguratorOperationRequest {
    tenantId: string;
    productId: string;
    body: ProductConfiguratorCreateConfiguratorRequest;
}

export interface ProductConfiguratorDeleteConfiguratorRequest {
    tenantId: string;
    configuratorId: string;
}

export interface ProductConfiguratorGetConfiguratorByProductIdRequest {
    tenantId: string;
    productId: string;
    status?: ProductConfiguratorGetConfiguratorByProductIdStatusEnum;
}

export interface ProductConfiguratorGetConfiguratorByProductId2Request {
    tenantId: string;
    productId: string;
    status: ProductConfiguratorGetConfiguratorByProductId2StatusEnum;
}

export interface ProductConfiguratorListConfiguratorsRequest {
    tenantId: string;
    productId: string;
    pageSize: number;
    body: ProductConfiguratorListPropertiesRequest;
}

export interface ProductConfiguratorUpdateConfiguratorOperationRequest {
    tenantId: string;
    configuratorId: string;
    body: ProductConfiguratorUpdateConfiguratorRequest;
}

/**
 * 
 */
export class ConfiguratorApi extends runtime.BaseAPI {

    /**
     * Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
     * Copy Configurator
     */
    async productConfiguratorCopyConfiguratorRaw(requestParameters: ProductConfiguratorCopyConfiguratorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorconfiguratorEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorCopyConfigurator.');
        }

        if (requestParameters.sourceConfiguratorId === null || requestParameters.sourceConfiguratorId === undefined) {
            throw new runtime.RequiredError('sourceConfiguratorId','Required parameter requestParameters.sourceConfiguratorId was null or undefined when calling productConfiguratorCopyConfigurator.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorCopyConfigurator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/product/{sourceConfiguratorId}/copy`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"sourceConfiguratorId"}}`, encodeURIComponent(String(requestParameters.sourceConfiguratorId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorCopyConfiguratorRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorconfiguratorEntityFromJSON(jsonValue));
    }

    /**
     * Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
     * Copy Configurator
     */
    async productConfiguratorCopyConfigurator(requestParameters: ProductConfiguratorCopyConfiguratorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorconfiguratorEntity> {
        const response = await this.productConfiguratorCopyConfiguratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
     * Create Configurator
     */
    async productConfiguratorCreateConfiguratorRaw(requestParameters: ProductConfiguratorCreateConfiguratorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorconfiguratorEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorCreateConfigurator.');
        }

        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling productConfiguratorCreateConfigurator.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorCreateConfigurator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/product/{productId}/create`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorCreateConfiguratorRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorconfiguratorEntityFromJSON(jsonValue));
    }

    /**
     * Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
     * Create Configurator
     */
    async productConfiguratorCreateConfigurator(requestParameters: ProductConfiguratorCreateConfiguratorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorconfiguratorEntity> {
        const response = await this.productConfiguratorCreateConfiguratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
     * Delete Configurator
     */
    async productConfiguratorDeleteConfiguratorRaw(requestParameters: ProductConfiguratorDeleteConfiguratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorDeleteConfigurator.');
        }

        if (requestParameters.configuratorId === null || requestParameters.configuratorId === undefined) {
            throw new runtime.RequiredError('configuratorId','Required parameter requestParameters.configuratorId was null or undefined when calling productConfiguratorDeleteConfigurator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/configurator/{configuratorId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"configuratorId"}}`, encodeURIComponent(String(requestParameters.configuratorId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
     * Delete Configurator
     */
    async productConfiguratorDeleteConfigurator(requestParameters: ProductConfiguratorDeleteConfiguratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productConfiguratorDeleteConfiguratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
     * Get Configurator by Product ID
     */
    async productConfiguratorGetConfiguratorByProductIdRaw(requestParameters: ProductConfiguratorGetConfiguratorByProductIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorconfiguratorEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorGetConfiguratorByProductId.');
        }

        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling productConfiguratorGetConfiguratorByProductId.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/product/{productId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorconfiguratorEntityFromJSON(jsonValue));
    }

    /**
     * Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
     * Get Configurator by Product ID
     */
    async productConfiguratorGetConfiguratorByProductId(requestParameters: ProductConfiguratorGetConfiguratorByProductIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorconfiguratorEntity> {
        const response = await this.productConfiguratorGetConfiguratorByProductIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
     * Get Configurator by Product ID
     */
    async productConfiguratorGetConfiguratorByProductId2Raw(requestParameters: ProductConfiguratorGetConfiguratorByProductId2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorconfiguratorEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorGetConfiguratorByProductId2.');
        }

        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling productConfiguratorGetConfiguratorByProductId2.');
        }

        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling productConfiguratorGetConfiguratorByProductId2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/product/{productId}/status/{status}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"status"}}`, encodeURIComponent(String(requestParameters.status))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorconfiguratorEntityFromJSON(jsonValue));
    }

    /**
     * Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
     * Get Configurator by Product ID
     */
    async productConfiguratorGetConfiguratorByProductId2(requestParameters: ProductConfiguratorGetConfiguratorByProductId2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorconfiguratorEntity> {
        const response = await this.productConfiguratorGetConfiguratorByProductId2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all product configurators.
     * List Product Configurators
     */
    async productConfiguratorListConfiguratorsRaw(requestParameters: ProductConfiguratorListConfiguratorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfiguratorListResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorListConfigurators.');
        }

        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling productConfiguratorListConfigurators.');
        }

        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling productConfiguratorListConfigurators.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorListConfigurators.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/product/{productId}/page-size/{pageSize}/configurators`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters.pageSize))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorListPropertiesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfiguratorListResponseFromJSON(jsonValue));
    }

    /**
     * List all product configurators.
     * List Product Configurators
     */
    async productConfiguratorListConfigurators(requestParameters: ProductConfiguratorListConfiguratorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfiguratorListResponse> {
        const response = await this.productConfiguratorListConfiguratorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
     * Update Configurator
     */
    async productConfiguratorUpdateConfiguratorRaw(requestParameters: ProductConfiguratorUpdateConfiguratorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductconfiguratorconfiguratorEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling productConfiguratorUpdateConfigurator.');
        }

        if (requestParameters.configuratorId === null || requestParameters.configuratorId === undefined) {
            throw new runtime.RequiredError('configuratorId','Required parameter requestParameters.configuratorId was null or undefined when calling productConfiguratorUpdateConfigurator.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productConfiguratorUpdateConfigurator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // APIAuthorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/configurator/{configuratorId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"configuratorId"}}`, encodeURIComponent(String(requestParameters.configuratorId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductConfiguratorUpdateConfiguratorRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductconfiguratorconfiguratorEntityFromJSON(jsonValue));
    }

    /**
     * Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
     * Update Configurator
     */
    async productConfiguratorUpdateConfigurator(requestParameters: ProductConfiguratorUpdateConfiguratorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductconfiguratorconfiguratorEntity> {
        const response = await this.productConfiguratorUpdateConfiguratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ProductConfiguratorGetConfiguratorByProductIdStatusEnum = {
    Unknown: 'UNKNOWN',
    Active: 'ACTIVE',
    Draft: 'DRAFT',
    Disabled: 'DISABLED'
} as const;
export type ProductConfiguratorGetConfiguratorByProductIdStatusEnum = typeof ProductConfiguratorGetConfiguratorByProductIdStatusEnum[keyof typeof ProductConfiguratorGetConfiguratorByProductIdStatusEnum];
/**
 * @export
 */
export const ProductConfiguratorGetConfiguratorByProductId2StatusEnum = {
    Unknown: 'UNKNOWN',
    Active: 'ACTIVE',
    Draft: 'DRAFT',
    Disabled: 'DISABLED'
} as const;
export type ProductConfiguratorGetConfiguratorByProductId2StatusEnum = typeof ProductConfiguratorGetConfiguratorByProductId2StatusEnum[keyof typeof ProductConfiguratorGetConfiguratorByProductId2StatusEnum];
